name: 'uv-lock-check'
description: 'Validates if the uv.lock file and optionally requirements.txt files were generated from the current pyproject.toml file'
branding:
  icon: 'check'
  color: 'blue'

inputs:
  pyproject-path:
    description: 'Path to the pyproject.toml file'
    required: false
    default: 'pyproject.toml'
  requirements-path:
    description: 'Path to the requirements.txt file. If empty, will look for requirements.txt in the same directory as pyproject.toml'
    required: false
    default: ''
  requirements-command:
    description: 'Complete uv command to generate requirements.txt (e.g., "uv pip compile --python-platform=linux pyproject.toml -o requirements-linux.txt")'
    required: false
    default: 'uv sync'
  run-sync:
    description: 'Whether to run uv sync to update uv.lock and requirements.txt'
    required: false
    default: 'false'

runs:
  using: "composite"
  steps:
    - name: Read Python version from pyproject.toml
      shell: bash
      run: |
        if [ ! -f "${{ inputs.pyproject-path }}" ]; then
          echo "Error: pyproject.toml not found at ${{ inputs.pyproject-path }}"
          exit 1
        fi
        PYTHON_VERSION=$(grep -m 1 'requires-python' "${{ inputs.pyproject-path }}" | sed -E 's/.*>=([0-9]+\.[0-9]+).*/\1/')
        if [ -z "$PYTHON_VERSION" ]; then
          echo "Error: Could not find Python version in ${{ inputs.pyproject-path }}"
          exit 1
        fi
        echo "PYTHON_VERSION=$PYTHON_VERSION" >> $GITHUB_ENV
        echo "PYPROJECT_DIR=$(dirname "${{ inputs.pyproject-path }}")" >> $GITHUB_ENV
        
        # Set requirements.txt path
        if [ -z "${{ inputs.requirements-path }}" ]; then
          echo "REQUIREMENTS_PATH=$(dirname "${{ inputs.pyproject-path }}")/requirements.txt" >> $GITHUB_ENV
        else
          echo "REQUIREMENTS_PATH=${{ inputs.requirements-path }}" >> $GITHUB_ENV
        fi

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install uv
      shell: bash
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH

    - name: Run uv sync
      if: inputs.run-sync == 'true'
      shell: bash
      working-directory: ${{ env.PYPROJECT_DIR }}
      run: |
        uv sync
        if [ -f "${{ env.REQUIREMENTS_PATH }}" ]; then
          ${{ inputs.requirements-command }}
        fi

    - name: Verify files
      shell: bash
      working-directory: ${{ env.PYPROJECT_DIR }}
      env:
        SYNC_COMMAND: ${{ inputs.requirements-command }}
      run: $GITHUB_ACTION_PATH/verify.sh
